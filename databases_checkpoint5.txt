1)
  SELECT person_id
  FROM table
  WHERE age > 16

2)
  Surf (SELECT) Fat (FROM) Waves (WHERE)


3)

Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

	i)
   SELECT name, gender, age
   FROM dogs
   WHERE breed LIKE '%labrador%';

	ii)
   SELECT id
   FROM dogs
   WHERE age < 1;

	iii)
   SELECT name,age
   FROM dogs
   WHERE gender = ‘F’
   AND weight > 35;

	iv)
    SELECT *
    FROM dogs
    WHERE breed NOT LIKE '%shepherd%';

	v)
   SELECT id, age, weight, breed
   FROM dogs
   WHERE weight > 60 OR breed='great dane';


 4)

	SELECT name, adoption_date FROM cats

  Results
**Schema (PostgreSQL v9.6)**

    CREATE TABLE cats(
      "id"            INTEGER,
      "name"          VARCHAR(16),
      "gender"        VARCHAR(1),
      "age"           INTEGER,
      "intake_date"   DATE,
      "adoption_date" DATE
    );

    INSERT INTO cats
        ("id", "name",   "gender", "age", "intake_date", "adoption_date")
    VALUES
        ( 1, 'Mushi',    'M',       1,    '2016-01-09',  '2016-03-22'),
        ( 2, 'Seashell', 'F',       7,    '2016-01-09',   NULL),
        ( 3, 'Azul',     'M',       3,    '2016-01-11',  '2016-04-17'),
        ( 4, 'Victoire', 'M',       7,    '2016-01-11',  '2016-09-01'),
        ( 5, 'Nala',     'F',       1,    '2016-01-12',   NULL);


---

**Query #1**

    SELECT name, adoption_date FROM cats;

| name     | adoption_date            |
| -------- | ------------------------ |
| Mushi    | 2016-03-22T00:00:00.000Z |
| Seashell |                          |
| Azul     | 2016-04-17T00:00:00.000Z |
| Victoire | 2016-09-01T00:00:00.000Z |
| Nala     |                          |

---

    **Query #2**

        SELECT name, age FROM cats;

    | name     | age |
    | -------- | --- |
    | Mushi    | 1   |
    | Seashell | 7   |
    | Azul     | 3   |
    | Victoire | 7   |
    | Nala     | 1   |

    ---

  5)
	i)
    SELECT *
    FROM cats

	ii)
     SELECT name, gender
     FROM cats
     WHERE age = 7;

	iii)
     SELECT DISTINCT name
     FROM cats;

 6)

 > greater than, when comparing 2 values ex. WHERE score > 80

 <  lower than, when comparing 2 values ex. WHERE score < 80

 = equal to, when comparing values  ex. WHERE name = ‘Bob’

>= greater than or equal to, when comparing values ex. WHERE  age >= 21

<= lower than or equal to, when comparing values ex. WHERE population <= 1000

!= not equal to, when comparing values ex. WHERE color != 'blue'

<> greater than or lower than ex. WHERE score < 80 OR > 50

LIKE is used to match text values against a pattern using wildcards. ex. WHERE name LIKE ‘%bob%’

BETWEEN returns true if the statement is within a range.  ex. WHERE age BETWEEN 10 AND 18

IS DISTINCT FROM return only distinct values without duplicates. this should be used in place of <> when one of the inputs could be null. ex. SELECT DISTINCT name FROM dogs

NOT only returns row if the expression is false. ex. WHERE NOT score < 50

AND return row(s) if all the conditions separated by the AND are true. ex. WHERE  gender = 'male' AND age >= 18

IS NULL checks if cell is null or not.  ex. WHERE  gender IS NULL

OR one of the expressions need to be true to be included in the output. ex. WHERE name = ‘steve’ or  name = ‘john’


 7)
	i)

	 | name     |
	 | -------- |
   | Seashell |
	 | Nala     |


	ii)

	| name     |
	| -------- |
	| Mushi    |
	| Seashell |
	| Victoire |
	| Nala     |



	iii)

		| id  |
		| --- |
		| 3   |
		| 4   |
